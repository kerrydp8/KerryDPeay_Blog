@model KerryDPeay_Blog.Models.BlogPost

@{
    ViewBag.Title = "Edit";
}

<style>

    #scale {
        background: url(https://static.vecteezy.com/system/resources/previews/000/122/941/non_2x/sunburst-grunge-background-vector.jpg);
        background-repeat: no-repeat;
        background-size: 2000px 2000px;
    }
</style>

<h1 class="text-center"><u>Edit Post</u></h1>


@using (Html.BeginForm("Edit", "BlogPosts", FormMethod.Post, new { enctype = "Multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <body id="scale">
        <div class="form-horizontal">
            <!--<h4>BlogPost</h4>-->
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Slug)
            @Html.HiddenFor(model => model.Create)
            @Html.HiddenFor(model => model.MediaURL)

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Abstract, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Abstract, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Abstract, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Slug, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Slug, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control", id = "editor" } })
                    @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Published, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Published)
                        @Html.ValidationMessageFor(model => model.Published, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MediaURL, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input name="image" type="file" class="form-control" id="fileUpload" />
                    @Html.ValidationMessageFor(model => model.MediaURL, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Create, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Create, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Create, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Update, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Update, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Update, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    <!--Returns the Edit view for the post but upon click, the Create action is used.
            A new title and slug are created and stored, leading to this post replacing
            the former post instead of being added on top.-->
                </div>
            </div>
        </div>
    </body>

}

<div>
    <button class="btn btn-default">@Html.ActionLink("Back to List", "Index")</button>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script src="~/Scripts/tinymce/jquery.tinymce.min.js"></script>

    <script type="text/javascript">
        tinymce.init({
            selector: '#editor'
        });
    </script>
}
